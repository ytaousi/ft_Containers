
Implement Stack Container :
    
    template <class T, class Container = ft::vector<T> >
    class ft::stack;


Basically all stack methods make a call to the underlying Container methods ; GG EZ

Container Stack difened using the std::vector for tests

    template <class T, class Container = std::vector<T> >
    class ft::stack;

i Think stack is done i should test it with the tester mamoussa and others created

Test at school : everything seems fine / its working with std::vector std::list std::deque
still need to check memory leaks  to be sure
----------------------------------------------------------------
Implement Vector Container :

    template <class T, Alloc = std::allocator<T> >
    class ft::vector;


    . define properties types


    - constructor
    - destructor
    - operaotr =

    - iterators function    
    - elements access function's
    - elements modifier function's
    - capacity function's
    - allocator function

    - non-member overload function's
    - non-member swap function

Whisper : this shit i CaSe SeNsSitIVe , so care when you are typedefing your types [copy passta cpp reference] and definning your class's template's

Implement Iterator for ft::vector<T, Alloc>

    - Random Access Iterator 
        // can be used to access elements at an arbitrary offset position relative to 
        //  the element they point to, offering the same functionality as pointers.
    
    - define the base templateClass "Iterator" typedef's 
    - define the traits type's 
    - define reverse iterator by typedefing your types using the Iterator_trait's
    - 





    when Bored From iterators
Define ft::vector<T, Alloc>  : almost finished


reserve() vs assign()

